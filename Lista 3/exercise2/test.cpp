#include "exercise2.cpp"

void testRational() {

    std::vector<double> myVector1 {1, 2, 3, 4, 5};
    Polynomial<double> myPolynomial1(myVector1);
    std::vector<double> myVector2 {1, 2, 3};
    Polynomial<double> myPolynomial2(myVector2);
    std::cout << "sum \n";
    myPolynomial1 + myPolynomial2;
    std::cout << "\n";
    std::vector<double> myVector3 {1, 2, 3, 4, 5};
    Polynomial<double> myPolynomial3(myVector3);
    std::vector<double> myVector4 {1, 2, 3};
    Polynomial<double> myPolynomial4(myVector4);
    std::cout << "difference \n";
    myPolynomial3 - myPolynomial4;   
    std::cout << "\n";
    std::vector<double> myVector5 {1, 2, 3, 4, 5};
    Polynomial<double> myPolynomial5(myVector5);
    std::vector<double> myVector6 {1, 2, 3};
    Polynomial<double> myPolynomial6(myVector6);
    std::cout << "product \n";
    myPolynomial5 * myPolynomial6;   
    std::cout << "\n";
    std::vector<double> myVector7 {1, 2, 3, 4, 5};
    Polynomial<double> myPolynomial7(myVector7);
    std::vector<double> myVector8 {1, 2, 3};
    Polynomial<double> myPolynomial8(myVector8);
    std::cout << "quotient \n";
    myPolynomial7 / myPolynomial8;   
    std::cout << "\n";
    std::vector<double> myVector9 {1, 2, 3, 4, 5};
    Polynomial<double> myPolynomial9(myVector9);
    std::vector<double> myVector10 {1, 2, 3};
    Polynomial<double> myPolynomial10(myVector10);
    std::cout << "reminder \n";
    myPolynomial9 % myPolynomial10;   
    std::cout << "\n";
    std::vector<double> myVector11 {1, 1, 1, 1, 1};
    Polynomial<double> myPolynomial11(myVector1);
    std::vector<double> myVector12 {1, 2, 4, 3, 2};
    Polynomial<double> myPolynomial12(myVector2);
    double i = myPolynomial11[3];
    std::cout << "value at index \n";
    std::cout << i;
    std::cout << "\n";
    double result = myPolynomial11(2);
    std::cout << "evaluate \n";
    std::cout << result;
    std::cout << "\n";
    bool cond = myPolynomial11 != myPolynomial12;
    std::cout << "condition \n";
    std::cout << cond;
    std::cout << "\n";
}

void testFinitefield() {
    GaloisField<long long int> a1(2,0), a2(2,0), a3(2,1), a4(2,2), a5(2,1);
    std::vector<GaloisField<long long int> > myVector1 {a1, a2, a3, a4, a5};
    Polynomial<GaloisField<long long int> > myPolynomial1(myVector1);
    GaloisField<long long int> a6(2,1), a7(2,2), a8(2,1), a9(2,0), a10(2,0);
    std::vector<GaloisField<long long int> > myVector2 {a6, a7, a8, a9, a10};
    Polynomial<GaloisField<long long int> > myPolynomial2(myVector2);
    std::cout << "sum \n";
    myPolynomial1 + myPolynomial2;
    std::cout << "\n";
    GaloisField<long long int> b1(2,0), b2(2,0), b3(2,1), b4(2,2), b5(2,1);
    std::vector<GaloisField<long long int>> myVector3 {b1, b2, b3, b4, b5};
    Polynomial<GaloisField<long long int>> myPolynomial3(myVector3);
    GaloisField<long long int> b6(2,1), b7(2,2), b8(2,1), b9(2,0), b10(2,0);
    std::vector<GaloisField<long long int>> myVector4 {b6, b7, b8, b9, b10};
    Polynomial<GaloisField<long long int>> myPolynomial4(myVector4);
    std::cout << "difference \n";
    myPolynomial3 - myPolynomial4;   
    std::cout << "\n";
    GaloisField<long long int> c1(3,2), c2(3,2), c3(3,2), c4(3,2), c5(3,2);
    std::vector<GaloisField<long long int> > myVector5 {c1, c2, c3, c4, c5};
    Polynomial<GaloisField<long long int> > myPolynomial5(myVector5);
    GaloisField<long long int> c6(3,2), c7(3,2), c8(3,2), c9(3,2), c10(3,2);
    std::vector<GaloisField<long long int> > myVector6 {c6, c7, c8, c9, c10};
    Polynomial<GaloisField<long long int> > myPolynomial6(myVector6);
    std::cout << "product \n";
    myPolynomial5 * myPolynomial6;
    std::cout << "\n";
    GaloisField<long long int> d1(5,1), d2(5,2), d3(5,3), d4(5,4), d5(5,5);
    std::vector<GaloisField<long long int> > myVector7 {d1, d2, d3, d4, d5};
    Polynomial<GaloisField<long long int> > myPolynomial7(myVector7);
    GaloisField<long long int> d6(5,1), d7(5,2), d8(5,3);
    std::vector<GaloisField<long long int> > myVector8 {d6, d7, d8};
    Polynomial<GaloisField<long long int> > myPolynomial8(myVector8);
    std::cout << "quotient \n";
    myPolynomial7 / myPolynomial8;  
    std::cout << "\n";
    GaloisField<long long int> e1(5,1), e2(5,2), e3(5,3),e4(5,4), e5(5,5);
    std::vector<GaloisField<long long int> > myVector9 {e1, e2, e3, e4, e5};
    Polynomial<GaloisField<long long int> > myPolynomial9(myVector9);
    GaloisField<long long int> e6(5,1), e7(5,2), e8(5,3);
    std::vector<GaloisField<long long int> > myVector10 {e6, e7, e8};
    Polynomial<GaloisField<long long int> > myPolynomial10(myVector10);
    std::cout << "reminder \n";
    myPolynomial9 % myPolynomial10;
    std::cout << "\n";
    GaloisField<long long int> f1(2,1), f2(2,1), f3(2,1), f4(2,1), f5(2,1);
    std::vector<GaloisField<long long int> > myVector11 {f1, f2, f3, f4, f5};
    Polynomial<GaloisField<long long int> > myPolynomial11(myVector11);
    GaloisField<long long int> f6(2,1), f7(2,2), f8(2,1), f9(2,0), f10(2,0);
    std::vector<GaloisField<long long int> > myVector12 {f6, f7, f8, f9, f10};
    Polynomial<GaloisField<long long int> > myPolynomial12(myVector12);
    GaloisField<long long int> i = myPolynomial11[3];
    std::cout << "value at index \n";
    std::cout << i;
    std::cout << "\n";
    GaloisField<long long int> value(2,3);
    GaloisField<long long int> result = myPolynomial11(value);
    std::cout << "evaluate \n";
    std::cout << result;
    std::cout << "\n";
    bool cond = myPolynomial11 != myPolynomial12;
    std::cout << "condition \n";
    std::cout << cond;
    std::cout << "\n";
}

int main() {
    testRational();
    testFinitefield();
    return 0;
}